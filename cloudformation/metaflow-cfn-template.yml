AWSTemplateFormatVersion: "2010-09-09"
Description: Stack for complete deployment of Metaflow (last-updated-date 10/26/2021)

Parameters:
  VPCCidr:
    Type: String
    Default: 10.20.0.0/16
    Description: "CIDR for the Metaflow VPC"
  Subnet1Cidr:
    Type: String
    Default: 10.20.0.0/24
    Description: "CIDR for Metaflow VPC Subnet 1"
  Subnet2Cidr:
    Type: String
    Default: 10.20.1.0/24
    Description: "CIDR for Metaflow VPC Subnet 2"
  MaxVCPUBatch:
    Type: Number
    Default: 64
    MinValue: 0
    MaxValue: 64
    Description: "Maximum VCPUs for Batch Compute Environment"
  MinVCPUBatch:
    Type: Number
    Default: 0
    MinValue: 0
    MaxValue: 64
    Description: "Minimum VCPUs for Batch Compute Environment"
  DesiredVCPUBatch:
    Type: Number
    Default: 8
    MinValue: 0
    MaxValue: 64
    Description: "Desired Starting VCPUs for Batch Compute Environment"
  ComputeEnvInstanceTypes:
    Type: CommaDelimitedList
    Default: "m7i.2xlarge,m7i.4xlarge,m7i.8xlarge,m7i.12xlarge,m7i.16xlarge"
    Description: "The instance types for the compute environment as a comma-separated list"
  MaxVCPUBatchGPU:
    Type: Number
    Default: 64
    MinValue: 0
    MaxValue: 64
    Description: "Maximum VCPUs for GPU Batch Compute Environment"
  MinVCPUBatchGPU:
    Type: Number
    Default: 0
    MinValue: 0
    MaxValue: 64
    Description: "Minimum VCPUs for GPU Batch Compute Environment"
  DesiredVCPUBatchGPU:
    Type: Number
    Default: 8
    MinValue: 0
    MaxValue: 64
    Description: "Desired Starting VCPUs for GPU Batch Compute Environment"
  ComputeEnvInstanceTypesGPU:
    Type: CommaDelimitedList
    Default: "g6.2xlarge,g6.4xlarge,g6.8xlarge"
    Description: "The instance types for the GPU compute environment as a comma-separated list"
  CustomRole:
    Type: String
    Default: "false"
    AllowedValues: ["false", "true"]
    Description: "Enable custom role with restricted permissions?"
  AdditionalWorkerPolicyArn:
    Type: String
    Default: ""
    Description: "Additional IAM Policy ARN to attach to Batch Compute Environment (leave empty, unless you know what you are doing)"
Conditions:
  EnableRole: !Equals [!Ref CustomRole, "true"]
  EnableAddtionalWorkerPolicy:
    !Not [!Equals [!Ref AdditionalWorkerPolicyArn, ""]]
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VPCCidr
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !Ref Subnet1Cidr
      MapPublicIpOnLaunch: true
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !Ref Subnet2Cidr
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
  DefaultGateway:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"
  Subnet1RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PublicRouteTable
  Subnet2RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PublicRouteTable
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSInstanceRole
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  MetaflowS3Bucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  MetaflowUserRole:
    Condition: "EnableRole"
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "Metaflow-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:*Stack"
                  - "cloudformation:*ChangeSet"
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-*"
              - Effect: "Allow"
                Action:
                  - "s3:*Object"
                Resource:
                  - !GetAtt "MetaflowS3Bucket.Arn"
                  - !Join ["", [!GetAtt "MetaflowS3Bucket.Arn", "/*"]]
              - Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-*"
              - Effect: "Allow"
                Action:
                  - "kms:Decrypt"
                  - "kms:Encrypt"
                Resource:
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/"
        - PolicyName: BatchPerms
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: JobsPermissions
                Effect: Allow
                Action:
                  - "batch:TerminateJob"
                  - "batch:DescribeJobs"
                  - "batch:DescribeJobDefinitions"
                  - "batch:DescribeJobQueues"
                  - "batch:RegisterJobDefinition"
                  - "batch:DescribeComputeEnvironments"
                Resource: "*"
              - Sid: DefinitionsPermissions
                Effect: Allow
                Action:
                  - "batch:SubmitJob"
                Resource:
                  - !Ref "JobQueue"
                  - !Ref "JobQueueGPU"
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-definition/*:*
        - PolicyName: CustomS3ListAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: BucketAccess
              Effect: Allow
              Action: s3:ListBucket
              Resource: !GetAtt "MetaflowS3Bucket.Arn"
        - PolicyName: LogPerms
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: GetLogs
              Effect: Allow
              Action: logs:GetLogEvents
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
        - PolicyName: AllowStepFunctions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: TasksAndExecutionsGlobal
                Effect: Allow
                Action:
                  - "states:ListStateMachines"
                Resource: "*"
              - Sid: StateMachines
                Effect: Allow
                Action:
                  - "states:DescribeStateMachine"
                  - "states:UpdateStateMachine"
                  - "states:StartExecution"
                  - "states:CreateStateMachine"
                  - "states:ListExecutions"
                  - "states:StopExecution"
                Resource: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*"
        - PolicyName: AllowEventBridge
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: RuleMaintenance
                Effect: Allow
                Action:
                  - "events:PutTargets"
                  - "events:DisableRule"
                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*"
              - Sid: PutRule
                Effect: Allow
                Action:
                  - "events:PutRule"
                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*"
                Condition:
                  "Null":
                    events:source: true
  MetaflowUserPolicy:
    Condition: "EnableRole"
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "cloudformation:DescribeStacks"
              - "cloudformation:*Stack"
              - "cloudformation:*ChangeSet"
            Resource:
              - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-*"
          - Effect: "Allow"
            Action:
              - "s3:*Object"
            Resource:
              - !GetAtt "MetaflowS3Bucket.Arn"
              - !Join ["", [!GetAtt "MetaflowS3Bucket.Arn", "/*"]]
          - Effect: "Allow"
            Action:
              - "iam:PassRole"
            Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-*"
          - Effect: "Allow"
            Action:
              - "kms:Decrypt"
              - "kms:Encrypt"
            Resource:
              - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/"
          - Sid: JobsPermissions
            Effect: Allow
            Action:
              - "batch:TerminateJob"
              - "batch:DescribeJobs"
              - "batch:DescribeJobDefinitions"
              - "batch:DescribeJobQueues"
              - "batch:RegisterJobDefinition"
              - "batch:DescribeComputeEnvironments"
            Resource: "*"
          - Sid: DefinitionsPermissions
            Effect: Allow
            Action:
              - "batch:SubmitJob"
            Resource:
              - !Ref "JobQueue"
              - !Ref "JobQueueGPU"
              - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-definition/*:*
          - Sid: BucketAccess
            Effect: Allow
            Action: s3:ListBucket
            Resource: !GetAtt "MetaflowS3Bucket.Arn"
          - Sid: GetLogs
            Effect: Allow
            Action: logs:GetLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
          - Sid: TasksAndExecutionsGlobal
            Effect: Allow
            Action:
              - "states:ListStateMachines"
            Resource: "*"
          - Sid: StateMachines
            Effect: Allow
            Action:
              - "states:DescribeStateMachine"
              - "states:UpdateStateMachine"
              - "states:StartExecution"
              - "states:CreateStateMachine"
              - "states:ListExecutions"
              - "states:StopExecution"
            Resource: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*"
          - Sid: RuleMaintenance
            Effect: Allow
            Action:
              - "events:PutTargets"
              - "events:DisableRule"
            Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*"
          - Sid: PutRule
            Effect: Allow
            Action:
              - "events:PutRule"
            Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*"
            Condition:
              "Null":
                events:source: true
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - events.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AllowStepFunctions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ExecuteStepFunction
                Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*"
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - states.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: BatchPerms
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: JobsPermissions
                Effect: Allow
                Action:
                  - "batch:TerminateJob"
                  - "batch:DescribeJobs"
                  - "batch:DescribeJobDefinitions"
                  - "batch:DescribeJobQueues"
                  - "batch:RegisterJobDefinition"
                Resource: "*"
              - Sid: DefinitionsPermissions
                Effect: Allow
                Action:
                  - "batch:SubmitJob"
                Resource:
                  - !Ref "JobQueue"
                  - !Ref "JobQueueGPU"
                  - !Sub arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-definition/*:*
        - PolicyName: CustomS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: BucketAccess
                Effect: Allow
                Action: s3:ListBucket
                Resource: !GetAtt "MetaflowS3Bucket.Arn"
              - Sid: ObjectAccess
                Effect: "Allow"
                Action:
                  - "s3:*Object"
                Resource:
                  - !GetAtt "MetaflowS3Bucket.Arn"
                  - !Join ["", [!GetAtt "MetaflowS3Bucket.Arn", "/*"]]
        - PolicyName: AllowCloudwatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudwatchLogDelivery
                Effect: Allow
                Action:
                  - "logs:CreateLogDelivery"
                  - "logs:GetLogDelivery"
                  - "logs:UpdateLogDelivery"
                  - "logs:DeleteLogDelivery"
                  - "logs:ListLogDeliveries"
                  - "logs:PutResourcePolicy"
                  - "logs:DescribeResourcePolicies"
                  - "logs:DescribeLogGroups"
                Resource: "*"
        - PolicyName: AllowEventBridge
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: RuleMaintenance
                Effect: Allow
                Action:
                  - "events:PutTargets"
                  - "events:DescribeRule"
                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule"
              - Sid: PutRule
                Effect: Allow
                Action:
                  - "events:PutRule"
                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule"
                Condition:
                  StringEquals:
                    events:detail-type: "Batch Job State Change"
        - PolicyName: DynamoDB
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: Items
                Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${StepFunctionsStateDDB}
  BatchS3TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !If
          - EnableAddtionalWorkerPolicy
          - !Ref "AdditionalWorkerPolicyArn"
          - !Ref AWS::NoValue
      Policies:
        - PolicyName: CustomS3ListBatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: BucketAccessBatch
              Effect: Allow
              Action: s3:ListBucket
              Resource: !GetAtt "MetaflowS3Bucket.Arn"
        - PolicyName: CustomS3Batch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: ObjectAccessBatch
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
              Resource: !Join ["", [!GetAtt "MetaflowS3Bucket.Arn", "/*"]]
        - PolicyName: DenyPresignedBatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: DenyPresignedBatch
              Effect: Deny
              Action: s3:*
              Resource: "*"
              Condition:
                StringNotEquals:
                  s3:authType: REST-HEADER
        - PolicyName: DynamoDB
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: Items
                Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${StepFunctionsStateDDB}
        - PolicyName: Cloudwatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowPutLogs
                Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
  BatchExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - batch.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: IAM_PASS_ROLE
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: VisualEditor0
              Effect: Allow
              Action: iam:PassRole
              Resource: "*"
              Condition:
                StringEquals:
                  iam:PassedToService:
                    - ec2.amazonaws.com
                    - ec2.amazonaws.com.cn
                    - ecs-tasks.amazonaws.com
        - PolicyName: custom_access_policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: VisualEditor2
              Effect: Allow
              Action:
                - ec2:DescribeAccountAttributes
                - ec2:DescribeInstances
                - ec2:DescribeInstanceAttribute
                - ec2:DescribeSubnets
                - ec2:DescribeSecurityGroups
                - ec2:DescribeKeyPairs
                - ec2:DescribeImages
                - ec2:DescribeImageAttribute
                - ec2:DescribeSpotInstanceRequests
                - ec2:DescribeSpotFleetInstances
                - ec2:DescribeSpotFleetRequests
                - ec2:DescribeSpotPriceHistory
                - ec2:DescribeVpcClassicLink
                - ec2:DescribeLaunchTemplateVersions
                - ec2:CreateLaunchTemplate
                - ec2:DeleteLaunchTemplate
                - ec2:RequestSpotFleet
                - ec2:CancelSpotFleetRequests
                - ec2:ModifySpotFleetRequest
                - ec2:TerminateInstances
                - ec2:RunInstances
                - autoscaling:DescribeAccountLimits
                - autoscaling:DescribeAutoScalingGroups
                - autoscaling:DescribeLaunchConfigurations
                - autoscaling:DescribeAutoScalingInstances
                - autoscaling:CreateLaunchConfiguration
                - autoscaling:CreateAutoScalingGroup
                - autoscaling:UpdateAutoScalingGroup
                - autoscaling:SetDesiredCapacity
                - autoscaling:DeleteLaunchConfiguration
                - autoscaling:DeleteAutoScalingGroup
                - autoscaling:CreateOrUpdateTags
                - autoscaling:SuspendProcesses
                - autoscaling:PutNotificationConfiguration
                - autoscaling:TerminateInstanceInAutoScalingGroup
                - ecs:DescribeClusters
                - ecs:DescribeContainerInstances
                - ecs:DescribeTaskDefinition
                - ecs:DescribeTasks
                - ecs:ListClusters
                - ecs:ListContainerInstances
                - ecs:ListTaskDefinitionFamilies
                - ecs:ListTaskDefinitions
                - ecs:ListTasks
                - ecs:CreateCluster
                - ecs:DeleteCluster
                - ecs:RegisterTaskDefinition
                - ecs:DeregisterTaskDefinition
                - ecs:RunTask
                - ecs:StartTask
                - ecs:StopTask
                - ecs:UpdateContainerAgent
                - ecs:DeregisterContainerInstance
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - iam:GetInstanceProfile
                - iam:GetRole
              Resource: "*"
        - PolicyName: iam_custom_policies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: VisualEditor3
              Effect: Allow
              Action: iam:CreateServiceLinkedRole
              Resource: "*"
              Condition:
                StringEquals:
                  iam:AWSServiceName:
                    - autoscaling.amazonaws.com
                    - ecs.amazonaws.com
        - PolicyName: ec2_custom_policies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: VisualEditor4
              Effect: Allow
              Action: ec2:CreateTags
              Resource: "*"
              Condition:
                StringEquals:
                  ec2:CreateAction: RunInstances
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ServiceRole: !GetAtt "BatchExecutionRole.Arn"
      ComputeResources:
        MaxvCpus: !Ref MaxVCPUBatch
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        Type: "EC2"
        Subnets:
          - !Ref Subnet1
          - !Ref Subnet2
        MinvCpus: !Ref MinVCPUBatch
        InstanceRole: !GetAtt "ECSInstanceProfile.Arn"
        InstanceTypes: !Ref ComputeEnvInstanceTypes
        DesiredvCpus: !Ref DesiredVCPUBatch
      State: ENABLED
  JobQueue:
    DependsOn: ComputeEnvironment
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ComputeEnvironment
      State: ENABLED
      Priority: 1
      JobQueueName: !Sub ${AWS::StackName}-cpu
  ComputeEnvironmentGPU:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ServiceRole: !GetAtt "BatchExecutionRole.Arn"
      ComputeResources:
        MaxvCpus: !Ref MaxVCPUBatchGPU
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        Type: "EC2"
        Subnets:
          - !Ref Subnet1
          - !Ref Subnet2
        MinvCpus: !Ref MinVCPUBatchGPU
        InstanceRole: !GetAtt "ECSInstanceProfile.Arn"
        InstanceTypes: !Ref ComputeEnvInstanceTypesGPU
        DesiredvCpus: !Ref DesiredVCPUBatchGPU
      State: ENABLED
  JobQueueGPU:
    DependsOn: ComputeEnvironmentGPU
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ComputeEnvironmentGPU
      State: ENABLED
      Priority: 1
      JobQueueName: !Sub ${AWS::StackName}-gpu
  StepFunctionsStateDDB:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "pathspec"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "pathspec"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
Outputs:
  MetaflowDataStoreS3Url:
    Description: Amazon S3 URL for Metaflow DataStore [METAFLOW_DATASTORE_SYSROOT_S3]
    Value: !Sub "s3://${MetaflowS3Bucket}/metaflow"
  MetaflowDataToolsS3Url:
    Description: Amazon S3 URL for Metaflow DataTools [METAFLOW_DATATOOLS_S3ROOT]
    Value: !Sub "s3://${MetaflowS3Bucket}/data"
  BatchJobQueueArn:
    Description: AWS Batch Job Queue ARN for Metaflow [METAFLOW_BATCH_JOB_QUEUE]
    Value: !Ref JobQueue
  ECSJobRoleForBatchJobs:
    Description: Role for AWS Batch to Access Amazon S3 [METAFLOW_ECS_S3_ACCESS_IAM_ROLE]
    Value: !GetAtt "BatchS3TaskRole.Arn"
  MetaflowUserRoleArn:
    Condition: "EnableRole"
    Description: "IAM Role for Metaflow Stack"
    Value: !GetAtt "MetaflowUserRole.Arn"
  EventBridgeRoleArn:
    Description: "IAM Role for Event Bridge [METAFLOW_EVENTS_SFN_ACCESS_IAM_ROLE]"
    Value: !GetAtt "EventBridgeRole.Arn"
  StepFunctionsRoleArn:
    Description: "IAM Role for Step Functions [METAFLOW_SFN_IAM_ROLE]"
    Value: !GetAtt "StepFunctionsRole.Arn"
  DDBTableName:
    Description: "DynamoDB Table Name [METAFLOW_SFN_DYNAMO_DB_TABLE]"
    Value: !Ref StepFunctionsStateDDB
  VPCId:
    Description: "VPC Id"
    Value: !Ref VPC
  Subnet1Id:
    Description: "Subnet 1 Id"
    Value: !Ref Subnet1
  Subnet2Id:
    Description: "Subnet 2 Id"
    Value: !Ref Subnet2
